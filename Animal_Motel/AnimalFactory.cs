//File: AnimalFactory.cs
//Name: Padma Priya Duvvuri
//Date: 23/06/2012

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

namespace Animal_Motel
{
    public class AnimalFactory
    {
        //to store animal details
        private List<Animal> m_animalList;
        //autogenerated id values
        private int m_idCounter;

          //constructor
        public AnimalFactory()
        {
            //In this list objects of diff animal objects saved
            m_animalList = new List<Animal>();
            m_idCounter = 1000;

        }

        /// <summary>
        /// It counts the number of animal objects that are 
        /// present in the m_animalList.
        /// </summary>
        /// <returns>no.of animals present</returns>
        public int Count
        {
            get { return m_animalList.Count; }
        }

        /// <summary>
        /// It creates a new animal id for every animal 
        /// present in the animal List.
        /// </summary>
        /// <returns>new id for the new animal</returns>
        public int GetNewID
        {
            get { return m_idCounter++; }
        }


        /// <summary>
        /// Add a new object to the list. The object will be appended to the 
        /// end of the list.
        /// </summary>
        /// <param name="animal">The object to be added.</param>
        /// <remarks></remarks>
        public void Add(Animal animal)
        {
            m_animalList.Add(animal);
        }

        /// <summary>
        /// Takes category and species that the user selects in the mainform and returns the Animal oject 
        /// that will be created
        /// </summary>
        /// <param name="category">Category of the animal</param>
        /// <param name="species">Selected animal species</param>
        /// <returns></returns>
        public Animal CreateAnimal(CategoryType category, string species)
        {
            Animal animalObj = null; //type not known at this time

            //type determined by late binding
            switch (category)
            {
                case CategoryType.Bird:
                    BirdSpecies birdSpecies = (BirdSpecies)Enum.Parse(typeof(BirdSpecies), species);
                    animalObj = BirdFactory.CreateBird(birdSpecies);           //Late binding
                    break;
                case CategoryType.Insect:
                    InsectSpecies insectSpecies = (InsectSpecies)Enum.Parse(typeof(InsectSpecies), species);
                    animalObj = InsectFactory.CreateInsect(insectSpecies);          //Late binding
                    break;
                case CategoryType.Mammal:
                    MammalSpecies mammalSpecies = (MammalSpecies)Enum.Parse(typeof(MammalSpecies), species);
                    animalObj =  MammalFactory.CreateMammal(mammalSpecies);        //Late binding
                    break;
                case CategoryType.Marine:
                    MarineSpecies marineSpecies = (MarineSpecies)Enum.Parse(typeof(MarineSpecies), species);
                    animalObj = MarineFactory.CreateMarine(marineSpecies);           //Late binding
                    break;
                case CategoryType.Reptile:
                    ReptileSpecies reptileSpecies = (ReptileSpecies)Enum.Parse(typeof(ReptileSpecies), species);
                    animalObj = ReptileFactory.CreateReptile(reptileSpecies);          //Late binding
                    break;
                default:
                    Debug.Assert(false, "To be completed!");
                    break;
            }
            if (animalObj != null)
            {
                animalObj.ID = GetNewID;
            }
            return animalObj; //return the crated animal Object
        }

        /// <summary>
        /// Provide an array of strings in which each string gives information about an
        /// object in the collection.  The function calls every object's ToString method.
        /// </summary>
        /// <returns>Array of strings containing info about the animal object.</returns>
        /// <remarks></remarks>
        public string[] GetAnimalDetailsListArray()
        {
            string[] strOut = new string[this.m_animalList.Count];
            int i = 0;

            foreach (Animal animal in this.m_animalList)
            {
                string animalDetails = String.Format("{0,-10} {1,-20}{2,20}{3,30}{4,20}\n",
                                    animal.ID, animal.Name, animal.AnimalType, animal.Age, animal.Gender);
                strOut[i] += animalDetails;
                i += 1;
            }
            return strOut;
        }

        /// <summary>
        /// Check so index is with the allowed range of the colelction boundaries.
        /// </summary>
        /// <param name="index"></param>
        /// <returns>True if index is valid, false otherwise</returns>
        /// <remarks>This function may be useful for client objects and therefore is
        /// declared public.</remarks>
        public bool CheckIndex(int index)
        {
            return (m_animalList != null) & (index < m_animalList.Count) & (index >= 0);
        }

        /// <summary>
        /// To get the details of the animal object at given index
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public Animal GetAnimal(int index)
        {
            if(CheckIndex(index))
            {
                return m_animalList.ElementAt(index);
            }
            else
            {
                return null;
            }
        }
    }
}
